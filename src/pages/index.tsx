import { type NextPage } from "next";
import { FormEvent, useState } from "react";
import Head from "next/head";

import Loader from "@/components/Loader";

async function fetchResultImage(data: Object) {
  const response = await fetch(
    "https://api-inference.huggingface.co/models/runwayml/stable-diffusion-v1-5",
    {
      headers: { Authorization: "Bearer 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" },
      method: "POST",
      body: JSON.stringify(data),
    }
  );
  const result = await response.blob();
  return result;
}

const Home: NextPage = () => {

  // const [inputs, setInputs] = useState('')
  const [loading, setLoading] = useState(false)
  const [image, setImage] = useState("")

  const submitHandler = async (event: FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    setLoading(true)
    fetchResultImage(
      {
        inputs: event.currentTarget.inputs.value
      }
    ).then(
      (res) => {
        setLoading(false)
        setImage(URL.createObjectURL(res))
      }
    ).catch(
      (err) => {
        window.alert("something gone wrong!")
      }
    )

  }

  return (
    <>
      <Head>
        <title>Tata's Image Generator SPA</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen  flex-col items-center justify-center bg-[#111111] gap-[2rem] ">
        {
          loading ? (<Loader />) : (
            <h1 className="text-[2rem] font-extrabold text-gray-50 " >
              What kind of picture do u want to see?
            </h1>
          )
        }
        {
          image && (
            <img src={image} alt="hehe" />
          )
        }
        <form className="p-[1rem] flex flex-col w-[70vw] gap-[2rem] " onSubmit={submitHandler} >
          <input
            type="text"
            id="inputs"
            name="inputs"
            placeholder="What Kind of Picture do u want to see?"
            required
            className="block w-full rounded-md py-2.5 px-3.5 text-gray-900 placeholder-black placeholder-opacity-75 bg-gray-100 transition focus:bg-gray-200 focus:outline-none"
          // onChange={() => { (event: InputEvent) => setInputs(event.target.value) }}
          // value={inputs}
          />
          <button
            type="submit"
            className="
                        xt-button 
                        py-2.5 
                        px-3.5 
                        text-sm 
                        rounded-md 
                        font-medium 
                        leading-snug 
                        tracking-wider 
                        uppercase 
                        text-white 
                        bg-blue-500 
                        transition 
                        hover:text-white 
                        hover:bg-blue-600 
                        active:text-white 
                        active:bg-blue-700 
                        on:text-white 
                        on:bg-blue-600
                        "
          >
            Submit
          </button>
        </form>
      </main>
    </>
  );
};

export default Home;
